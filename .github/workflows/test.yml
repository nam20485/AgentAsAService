name: Test and Coverage

on:
  push:
    branches: [ master, development, copilot, staging ]
  pull_request:
    branches: [ master, development, copilot ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props', '**/*.targets') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore AgentAsAService.sln

    - name: Build solution
      run: dotnet build AgentAsAService.sln --configuration Release --no-restore

    - name: Run tests with coverage
      run: |
        dotnet test AgentAsAService.sln \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults \
          --logger trx \
          --logger "console;verbosity=detailed"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: |
          ./TestResults/**/*.trx
          ./TestResults/**/*.xml
        retention-days: 30

    - name: Upload coverage reports (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          ./TestResults/**/coverage.cobertura.xml
          ./**/TestResults/*/coverage.opencover.xml
        retention-days: 30

  coverage-report:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports
        path: ./coverage

    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool

    - name: Generate coverage report
      run: |
        reportgenerator \
          -reports:"./coverage/**/coverage.cobertura.xml;./coverage/**/coverage.opencover.xml" \
          -targetdir:"./coverage-html" \
          -reporttypes:"Html;Html_Dark;Badges;TextSummary" \
          -verbosity:Verbose \
          -title:"AgentAsAService Test Coverage" \
          -tag:"${{ github.run_number }}" \
          -historydir:"./coverage-history"

    - name: Upload HTML coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html-report
        path: ./coverage-html
        retention-days: 90

    - name: Display coverage summary
      run: |
        echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
        if [ -f "./coverage-html/Summary.txt" ]; then
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat ./coverage-html/Summary.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './coverage-html/Summary.txt';
          
          if (fs.existsSync(path)) {
            const summary = fs.readFileSync(path, 'utf8');
            const comment = `## Test Coverage Report
            
            \`\`\`
            ${summary}
            \`\`\`
            
            📊 [View detailed coverage report](../actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test, coverage-report]
    if: failure()

    steps:
    - name: Report failure
      run: |
        echo "## ❌ Test Pipeline Failed" >> $GITHUB_STEP_SUMMARY
        echo "One or more test jobs failed. Please check the logs above." >> $GITHUB_STEP_SUMMARY
        echo "### Failed Jobs:" >> $GITHUB_STEP_SUMMARY
        echo "- Test: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage Report: ${{ needs.coverage-report.result }}" >> $GITHUB_STEP_SUMMARY
