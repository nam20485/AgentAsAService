@page "/api-test"
@using System.Net.Http
@using System.Text.Json
@using Microsoft.JSInterop
@inject HttpClient Http

<h1>API Connectivity Test</h1>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Service Health Check</h5>
            </div>
            <div class="card-body">
                <button class="btn btn-primary" @onclick="TestHealthEndpoint">Test Health Endpoint</button>
                <div class="mt-3">
                    <strong>Status:</strong> 
                    <span class="@GetStatusClass(healthStatus)">@healthStatus</span>
                </div>
                @if (!string.IsNullOrEmpty(healthResponse))
                {
                    <div class="mt-2">
                        <strong>Response:</strong>
                        <pre class="bg-light p-2">@healthResponse</pre>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Service Configuration</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <strong>Base URL:</strong> @Http.BaseAddress
                </div>
                <div class="mb-3">
                    <strong>Environment:</strong> Development (Authentication Bypassed)
                </div>
                <div class="alert alert-info" role="alert">
                    <strong>Note:</strong> This page is for basic API connectivity testing. For orchestrator management, visit the <a href="/orchestrators" class="alert-link">Orchestrators</a> page.
                </div>
            </div>
        </div>
    </div>
</div>



@code {
    private string healthStatus = "Not tested";
    private string healthResponse = "";

    private async Task TestHealthEndpoint()
    {
        try
        {
            healthStatus = "Testing...";
            StateHasChanged();
            
            var response = await Http.GetStringAsync("/health");
            healthStatus = "✓ Success";
            healthResponse = response;
        }
        catch (Exception ex)
        {
            healthStatus = "✗ Failed";
            healthResponse = $"Error: {ex.Message}";
        }
        
        StateHasChanged();
    }
    
    private string GetStatusClass(string status)
    {
        return status switch
        {
            var s when s.StartsWith("✓") => "text-success",
            var s when s.StartsWith("✗") => "text-danger",
            "Testing..." => "text-warning",
            _ => "text-muted"
        };
    }
}
