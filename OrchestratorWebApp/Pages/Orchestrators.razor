@page "/orchestrators"
@using System.Net.Http
@using System.Text.Json
@inject HttpClient Http

<PageTitle>Orchestrators - Agent as a Service</PageTitle>

<h1>ðŸ¤– Orchestrators Management</h1>

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h5>Active Orchestrators</h5>
            </div>
            <div class="card-body">
                <button class="btn btn-primary mb-3" @onclick="LoadOrchestrators">
                    <span class="bi bi-arrow-clockwise" aria-hidden="true"></span> Refresh List
                </button>
                
                @if (isLoading)
                {
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p>Loading orchestrators...</p>
                    </div>
                }
                else if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        <strong>Error:</strong> @errorMessage
                    </div>
                }
                else if (orchestrators.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Status</th>
                                    <th>Created</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var orchestrator in orchestrators)
                                {
                                    <tr>
                                        <td>@orchestrator.Name</td>
                                        <td>
                                            <span class="badge bg-success">Active</span>
                                        </td>
                                        <td>@orchestrator.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                                        <td>
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewDetails(orchestrator.Id)">
                                                <span class="bi bi-eye" aria-hidden="true"></span> View
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="alert alert-info" role="alert">
                        <strong>No orchestrators found.</strong> Create your first orchestrator to get started.
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5>Create New Orchestrator</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label for="orchestratorName" class="form-label">Orchestrator Name:</label>
                    <input type="text" class="form-control" id="orchestratorName" @bind="newOrchestratorName" placeholder="Enter orchestrator name" />
                </div>
                <button class="btn btn-success" @onclick="CreateOrchestrator" disabled="@(string.IsNullOrWhiteSpace(newOrchestratorName) || isCreating)">
                    @if (isCreating)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>Creating...</span>
                    }
                    else
                    {
                        <span class="bi bi-plus-circle" aria-hidden="true"></span>
                        <span>Create Orchestrator</span>
                    }
                </button>
                
                @if (!string.IsNullOrEmpty(createMessage))
                {
                    <div class="mt-3 alert @(createSuccess ? "alert-success" : "alert-danger")" role="alert">
                        @createMessage
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<OrchestratorInfo> orchestrators = new();
    private string newOrchestratorName = "";
    private bool isLoading = false;
    private bool isCreating = false;
    private string errorMessage = "";
    private string createMessage = "";
    private bool createSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrchestrators();
    }

    private async Task LoadOrchestrators()
    {
        isLoading = true;
        errorMessage = "";
        
        try
        {
            var response = await Http.GetAsync("/api/orchestrators");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                orchestrators = JsonSerializer.Deserialize<List<OrchestratorInfo>>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new();
            }
            else
            {
                errorMessage = $"Failed to load orchestrators: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading orchestrators: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CreateOrchestrator()
    {
        if (string.IsNullOrWhiteSpace(newOrchestratorName))
            return;

        isCreating = true;
        createMessage = "";
        
        try
        {
            var orchestratorData = new { Name = newOrchestratorName.Trim() };
            var json = JsonSerializer.Serialize(orchestratorData);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            
            var response = await Http.PostAsync("/api/orchestrators", content);
            
            if (response.IsSuccessStatusCode)
            {
                createMessage = $"Orchestrator '{newOrchestratorName}' created successfully!";
                createSuccess = true;
                newOrchestratorName = "";
                await LoadOrchestrators();
            }
            else
            {
                createMessage = $"Failed to create orchestrator: {response.StatusCode}";
                createSuccess = false;
            }
        }
        catch (Exception ex)
        {
            createMessage = $"Error creating orchestrator: {ex.Message}";
            createSuccess = false;
        }
        finally
        {
            isCreating = false;
        }
    }

    private void ViewDetails(string orchestratorId)
    {
        // TODO: Navigate to orchestrator details page
        Console.WriteLine($"View details for orchestrator: {orchestratorId}");
    }

    public class OrchestratorInfo
    {
        public string Id { get; set; } = "";
        public string Name { get; set; } = "";
        public DateTime CreatedAt { get; set; }
    }
}
